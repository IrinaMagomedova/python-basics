"""3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только
числами. Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на
экран.

Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода пользователем
очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться."""

class IntListError(Exception):
    def __init__(self, txt):
        self.txt = txt

def get_int_list():
    digit_list = []
    while True:
        number = input("Введите одно очередное число для формирования списка. Введите 'stop' для завершения ввода.")
        if number == 'stop':
            break
        else:
            try:
                for el in number:
                    if el not in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '.']:
                        raise IntListError("Введено недопустимое значение")
            except IntListError as err:
                print(err)
            else:
                digit_list.append(float(number))
    print(digit_list)


get_int_list()